{
  "type": "Program",
  "body": [
    {
      "type": "AstroFragment",
      "children": [
        {
          "type": "AstroRawText",
          "value": "\n\n**Astro components** are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime.\n\nAstro component syntax is a superset of HTML. The syntax was [designed to feel familiar to anyone with experience writing HTML or JSX](/en/comparing-astro-vs-other-tools/#astro-vs-jsx), and adds support for including components and JavaScript expressions. You can spot an Astro component by its file extension: ",
          "raw": "\n\n**Astro components** are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime.\n\nAstro component syntax is a superset of HTML. The syntax was [designed to feel familiar to anyone with experience writing HTML or JSX](/en/comparing-astro-vs-other-tools/#astro-vs-jsx), and adds support for including components and JavaScript expressions. You can spot an Astro component by its file extension: ",
          "range": [
            130,
            587
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 3
            },
            "end": {
              "line": 10,
              "column": 311
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`.astro`",
          "raw": "`.astro`",
          "range": [
            587,
            595
          ],
          "loc": {
            "start": {
              "line": 10,
              "column": 311
            },
            "end": {
              "line": 10,
              "column": 319
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": ".\n\nAstro components are extremely flexible. Often, an Astro component will contain some **reusable UI on the page**, like a header or a profile card. At other times, an Astro component may contain a smaller snippet of HTML, like a collection of common ",
          "raw": ".\n\nAstro components are extremely flexible. Often, an Astro component will contain some **reusable UI on the page**, like a header or a profile card. At other times, an Astro component may contain a smaller snippet of HTML, like a collection of common ",
          "range": [
            595,
            847
          ],
          "loc": {
            "start": {
              "line": 10,
              "column": 319
            },
            "end": {
              "line": 12,
              "column": 249
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<meta>`",
          "raw": "`<meta>`",
          "range": [
            847,
            855
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 249
            },
            "end": {
              "line": 12,
              "column": 257
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " tags that make SEO easy to work with. Astro components can even contain an entire page layout.\n\nThe most important thing to know about Astro components is that they **render to HTML during your build.** Even if you run JavaScript code inside of your components, it will all run ahead-of-time, stripped from the final page that you send to your users. The result is a faster site, with zero JavaScript footprint added by default.\n\n\n## Component Overview\n\nAn Astro component is made up of two main parts: the **Component Script** and the **Component Template**. Each part performs a different job, but together they aim to provide a framework that is both easy to use and expressive enough to handle whatever you might want to build.\n\n",
          "raw": " tags that make SEO easy to work with. Astro components can even contain an entire page layout.\n\nThe most important thing to know about Astro components is that they **render to HTML during your build.** Even if you run JavaScript code inside of your components, it will all run ahead-of-time, stripped from the final page that you send to your users. The result is a faster site, with zero JavaScript footprint added by default.\n\n\n## Component Overview\n\nAn Astro component is made up of two main parts: the **Component Script** and the **Component Template**. Each part performs a different job, but together they aim to provide a framework that is both easy to use and expressive enough to handle whatever you might want to build.\n\n",
          "range": [
            855,
            1589
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 257
            },
            "end": {
              "line": 21,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// Component Script (JavaScript)\n---\n<!-- Component Template (HTML + JS Expressions) -->\n```",
          "raw": "```astro\n---\n// Component Script (JavaScript)\n---\n<!-- Component Template (HTML + JS Expressions) -->\n```",
          "range": [
            1589,
            1694
          ],
          "loc": {
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\nYou can use components inside of other components, to build more and more advanced UI. For example, a ",
          "raw": "\n\nYou can use components inside of other components, to build more and more advanced UI. For example, a ",
          "range": [
            1694,
            1798
          ],
          "loc": {
            "start": {
              "line": 26,
              "column": 3
            },
            "end": {
              "line": 28,
              "column": 102
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`Button`",
          "raw": "`Button`",
          "range": [
            1798,
            1806
          ],
          "loc": {
            "start": {
              "line": 28,
              "column": 102
            },
            "end": {
              "line": 28,
              "column": 110
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " component could be used to create a ",
          "raw": " component could be used to create a ",
          "range": [
            1806,
            1843
          ],
          "loc": {
            "start": {
              "line": 28,
              "column": 110
            },
            "end": {
              "line": 28,
              "column": 147
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`ButtonGroup`",
          "raw": "`ButtonGroup`",
          "range": [
            1843,
            1856
          ],
          "loc": {
            "start": {
              "line": 28,
              "column": 147
            },
            "end": {
              "line": 28,
              "column": 160
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " component like so:\n\n",
          "raw": " component like so:\n\n",
          "range": [
            1856,
            1877
          ],
          "loc": {
            "start": {
              "line": 28,
              "column": 160
            },
            "end": {
              "line": 30,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// Example: ButtonGroup.astro\nimport Button from './Button.astro';\n---\n<div>\n  <Button title=\"Button 1\" />\n  <Button title=\"Button 2\" />\n  <Button title=\"Button 3\" />\n</div>\n```",
          "raw": "```astro\n---\n// Example: ButtonGroup.astro\nimport Button from './Button.astro';\n---\n<div>\n  <Button title=\"Button 1\" />\n  <Button title=\"Button 2\" />\n  <Button title=\"Button 3\" />\n</div>\n```",
          "range": [
            1877,
            2067
          ],
          "loc": {
            "start": {
              "line": 30,
              "column": 0
            },
            "end": {
              "line": 40,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n\n### The Component Script\n\nAstro uses a code fence (",
          "raw": "\n\n\n### The Component Script\n\nAstro uses a code fence (",
          "range": [
            2067,
            2121
          ],
          "loc": {
            "start": {
              "line": 40,
              "column": 3
            },
            "end": {
              "line": 45,
              "column": 25
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`---`",
          "raw": "`---`",
          "range": [
            2121,
            2126
          ],
          "loc": {
            "start": {
              "line": 45,
              "column": 25
            },
            "end": {
              "line": 45,
              "column": 30
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": ") to identify the component script in your Astro component. If you've ever written Markdown before, you may already be familiar with a similar concept called *frontmatter.* Astro's idea of a component script was directly inspired by this concept.\n\nYou can use the component script to write any JavaScript code that you need to render your template. This can include:\n\n- Importing other Astro components\n- Importing other framework components, like React\n- Importing data, like a JSON file\n- fetching content from an API or database\n- creating variables that you will reference in your template\n\n\n",
          "raw": ") to identify the component script in your Astro component. If you've ever written Markdown before, you may already be familiar with a similar concept called *frontmatter.* Astro's idea of a component script was directly inspired by this concept.\n\nYou can use the component script to write any JavaScript code that you need to render your template. This can include:\n\n- Importing other Astro components\n- Importing other framework components, like React\n- Importing data, like a JSON file\n- fetching content from an API or database\n- creating variables that you will reference in your template\n\n\n",
          "range": [
            2126,
            2722
          ],
          "loc": {
            "start": {
              "line": 45,
              "column": 30
            },
            "end": {
              "line": 56,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// Note: Imports must live at the top of your file.\nimport SomeAstroComponent from '../components/SomeAstroComponent.astro';\nimport SomeReactComponent from '../components/SomeReactComponent.jsx';\nimport someData from '../data/pokemon.json';\n\n// Access passed-in component props, like `<X title=\"Hello, World\" />`\nconst {title} = Astro.props;\n// Fetch external data, even from a private API or database\nconst data = await fetch('SOME_SECRET_API_URL/users').then(r => r.json());\n---\n<!-- Your template here! -->\n```",
          "raw": "```astro\n---\n// Note: Imports must live at the top of your file.\nimport SomeAstroComponent from '../components/SomeAstroComponent.astro';\nimport SomeReactComponent from '../components/SomeReactComponent.jsx';\nimport someData from '../data/pokemon.json';\n\n// Access passed-in component props, like `<X title=\"Hello, World\" />`\nconst {title} = Astro.props;\n// Fetch external data, even from a private API or database\nconst data = await fetch('SOME_SECRET_API_URL/users').then(r => r.json());\n---\n<!-- Your template here! -->\n```",
          "range": [
            2722,
            3248
          ],
          "loc": {
            "start": {
              "line": 56,
              "column": 0
            },
            "end": {
              "line": 69,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\nThe code fence is designed to guarantee that the JavaScript that you write in it is \"fenced in.\" It won't escape into your frontend application, or fall into your users hands. You can safely write code here that is expensive or sensitive (like a call to your private database) without worrying about it ever ending up in your user's browser.\n\n:::tip\nYou can even write TypeScript in your component script!\n:::\n\n### The Component Template\n\nBelow the component script, sits the component template. The component template decides the HTML output of your component.\n\nIf you write plain HTML here, your component will render that HTML in any Astro page it is imported and used.\n\nHowever, Astro's component template syntax also supports **JavaScript expressions**, **imported components** and [**special Astro directives**](/en/reference/directives-reference/). Data and values defined (at page build time) in the component script can be used in the component template to produce dynamically-created HTML.\n\n",
          "raw": "\n\nThe code fence is designed to guarantee that the JavaScript that you write in it is \"fenced in.\" It won't escape into your frontend application, or fall into your users hands. You can safely write code here that is expensive or sensitive (like a call to your private database) without worrying about it ever ending up in your user's browser.\n\n:::tip\nYou can even write TypeScript in your component script!\n:::\n\n### The Component Template\n\nBelow the component script, sits the component template. The component template decides the HTML output of your component.\n\nIf you write plain HTML here, your component will render that HTML in any Astro page it is imported and used.\n\nHowever, Astro's component template syntax also supports **JavaScript expressions**, **imported components** and [**special Astro directives**](/en/reference/directives-reference/). Data and values defined (at page build time) in the component script can be used in the component template to produce dynamically-created HTML.\n\n",
          "range": [
            3248,
            4251
          ],
          "loc": {
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 85,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// Your component script here!\nimport ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';\nconst myFavoritePokemon = [/* ... */];\n---\n<!-- HTML comments supported! -->\n\n<h1>Hello, world!</h1>\n\n<!-- Use props and other variables from the component script: -->\n<p>My favorite pokemon is: {Astro.props.title}</p>\n\n<!-- Include other components with a `client:` directive to hydrate: -->\n<ReactPokemonComponent client:visible />\n\n<!-- Mix HTML with JavaScript expressions, similar to JSX: -->\n<ul>\n  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}\n<ul>\n\n<!-- Use a template directive to inject an unescaped HTML string into an element: -->\n<p set:html={rawHTMLString} />\n```",
          "raw": "```astro\n---\n// Your component script here!\nimport ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';\nconst myFavoritePokemon = [/* ... */];\n---\n<!-- HTML comments supported! -->\n\n<h1>Hello, world!</h1>\n\n<!-- Use props and other variables from the component script: -->\n<p>My favorite pokemon is: {Astro.props.title}</p>\n\n<!-- Include other components with a `client:` directive to hydrate: -->\n<ReactPokemonComponent client:visible />\n\n<!-- Mix HTML with JavaScript expressions, similar to JSX: -->\n<ul>\n  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}\n<ul>\n\n<!-- Use a template directive to inject an unescaped HTML string into an element: -->\n<p set:html={rawHTMLString} />\n```",
          "range": [
            4251,
            4959
          ],
          "loc": {
            "start": {
              "line": 85,
              "column": 0
            },
            "end": {
              "line": 108,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n### Dynamic JSX Expressions\n\nAstro components can define local variables inside of the frontmatter component script. Any script variables are then automatically available in the component's HTML template below.\n\n#### Dynamic Values\n\nThese local variables can be used in curly braces to pass values to be used as HTML output:\n\n",
          "raw": "\n\n### Dynamic JSX Expressions\n\nAstro components can define local variables inside of the frontmatter component script. Any script variables are then automatically available in the component's HTML template below.\n\n#### Dynamic Values\n\nThese local variables can be used in curly braces to pass values to be used as HTML output:\n\n",
          "range": [
            4959,
            5287
          ],
          "loc": {
            "start": {
              "line": 108,
              "column": 3
            },
            "end": {
              "line": 118,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\nconst name = \"Astro\";\n---\n<div>\n  <h1>Hello {name}!</h1>\n</div>\n```",
          "raw": "```astro\n---\nconst name = \"Astro\";\n---\n<div>\n  <h1>Hello {name}!</h1>\n</div>\n```",
          "range": [
            5287,
            5367
          ],
          "loc": {
            "start": {
              "line": 118,
              "column": 0
            },
            "end": {
              "line": 125,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n#### Dynamic Attributes\n\nThese local variables can be used in curly braces to pass attribute values to HTML elements and components:\n\n",
          "raw": "\n\n#### Dynamic Attributes\n\nThese local variables can be used in curly braces to pass attribute values to HTML elements and components:\n\n",
          "range": [
            5367,
            5503
          ],
          "loc": {
            "start": {
              "line": 125,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\nconst name = \"Astro\";\n---\n<h1 class={name}>Attribute expressions are supported</h1>\n\n<MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} />\n```",
          "raw": "```astro\n---\nconst name = \"Astro\";\n---\n<h1 class={name}>Attribute expressions are supported</h1>\n\n<MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} />\n```",
          "range": [
            5503,
            5669
          ],
          "loc": {
            "start": {
              "line": 131,
              "column": 0
            },
            "end": {
              "line": 138,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n#### Dynamic HTML\n\nThese local variables can be used in JSX-like functions to produce dynamically-generated HTML elements:\n\n",
          "raw": "\n\n#### Dynamic HTML\n\nThese local variables can be used in JSX-like functions to produce dynamically-generated HTML elements:\n\n",
          "range": [
            5669,
            5795
          ],
          "loc": {
            "start": {
              "line": 138,
              "column": 3
            },
            "end": {
              "line": 144,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\nconst items = [\"Dog\", \"Cat\", \"Platypus\"];\n---\n<ul>\n  {items.map((item) => (\n    <li>{item}</li>\n  ))}\n</ul>\n```",
          "raw": "```astro\n---\nconst items = [\"Dog\", \"Cat\", \"Platypus\"];\n---\n<ul>\n  {items.map((item) => (\n    <li>{item}</li>\n  ))}\n</ul>\n```",
          "range": [
            5795,
            5919
          ],
          "loc": {
            "start": {
              "line": 144,
              "column": 0
            },
            "end": {
              "line": 153,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n#### Fragments & Multiple Elements\n\nRemember: an Astro component template can render multiple elements with no need to wrap everything in a single ",
          "raw": "\n\n#### Fragments & Multiple Elements\n\nRemember: an Astro component template can render multiple elements with no need to wrap everything in a single ",
          "range": [
            5919,
            6068
          ],
          "loc": {
            "start": {
              "line": 153,
              "column": 3
            },
            "end": {
              "line": 157,
              "column": 111
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<div>`",
          "raw": "`<div>`",
          "range": [
            6068,
            6075
          ],
          "loc": {
            "start": {
              "line": 157,
              "column": 111
            },
            "end": {
              "line": 157,
              "column": 118
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " or ",
          "raw": " or ",
          "range": [
            6075,
            6079
          ],
          "loc": {
            "start": {
              "line": 157,
              "column": 118
            },
            "end": {
              "line": 157,
              "column": 122
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<>`",
          "raw": "`<>`",
          "range": [
            6079,
            6083
          ],
          "loc": {
            "start": {
              "line": 157,
              "column": 122
            },
            "end": {
              "line": 157,
              "column": 126
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": ".\n\nHowever, when using an Astro JSX-like expression to dynamically create elements, you must wrap these multiple elements inside of a **Fragment** just like you would in JavaScript or JSX. Astro supports using either ",
          "raw": ".\n\nHowever, when using an Astro JSX-like expression to dynamically create elements, you must wrap these multiple elements inside of a **Fragment** just like you would in JavaScript or JSX. Astro supports using either ",
          "range": [
            6083,
            6300
          ],
          "loc": {
            "start": {
              "line": 157,
              "column": 126
            },
            "end": {
              "line": 159,
              "column": 214
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<Fragment> </Fragment>`",
          "raw": "`<Fragment> </Fragment>`",
          "range": [
            6300,
            6324
          ],
          "loc": {
            "start": {
              "line": 159,
              "column": 214
            },
            "end": {
              "line": 159,
              "column": 238
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " or ",
          "raw": " or ",
          "range": [
            6324,
            6328
          ],
          "loc": {
            "start": {
              "line": 159,
              "column": 238
            },
            "end": {
              "line": 159,
              "column": 242
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<> </>`",
          "raw": "`<> </>`",
          "range": [
            6328,
            6336
          ],
          "loc": {
            "start": {
              "line": 159,
              "column": 242
            },
            "end": {
              "line": 159,
              "column": 250
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": ".\n\n",
          "raw": ".\n\n",
          "range": [
            6336,
            6339
          ],
          "loc": {
            "start": {
              "line": 159,
              "column": 250
            },
            "end": {
              "line": 161,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\nconst items = [\"Dog\", \"Cat\", \"Platypus\"];\n---\n<ul>\n  {items.map((item) => (\n    <>\n      <li>Red {item}</li>\n      <li>Blue {item}</li>\n      <li>Green {item}</li>\n    </>\n  ))}\n</ul>\n```",
          "raw": "```astro\n---\nconst items = [\"Dog\", \"Cat\", \"Platypus\"];\n---\n<ul>\n  {items.map((item) => (\n    <>\n      <li>Red {item}</li>\n      <li>Blue {item}</li>\n      <li>Green {item}</li>\n    </>\n  ))}\n</ul>\n```",
          "range": [
            6339,
            6539
          ],
          "loc": {
            "start": {
              "line": 161,
              "column": 0
            },
            "end": {
              "line": 174,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n\n### Component Props\n\nAn Astro component can define and accept props. These props then become available to the component template for rendering HTML. Props are available on the ",
          "raw": "\n\n\n### Component Props\n\nAn Astro component can define and accept props. These props then become available to the component template for rendering HTML. Props are available on the ",
          "range": [
            6539,
            6718
          ],
          "loc": {
            "start": {
              "line": 174,
              "column": 3
            },
            "end": {
              "line": 179,
              "column": 155
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`Astro.props`",
          "raw": "`Astro.props`",
          "range": [
            6718,
            6731
          ],
          "loc": {
            "start": {
              "line": 179,
              "column": 155
            },
            "end": {
              "line": 179,
              "column": 168
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " global in your frontmatter script.\n\nHere is an example of a component that receives a ",
          "raw": " global in your frontmatter script.\n\nHere is an example of a component that receives a ",
          "range": [
            6731,
            6818
          ],
          "loc": {
            "start": {
              "line": 179,
              "column": 168
            },
            "end": {
              "line": 181,
              "column": 50
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`greeting`",
          "raw": "`greeting`",
          "range": [
            6818,
            6828
          ],
          "loc": {
            "start": {
              "line": 181,
              "column": 50
            },
            "end": {
              "line": 181,
              "column": 60
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " prop and a ",
          "raw": " prop and a ",
          "range": [
            6828,
            6840
          ],
          "loc": {
            "start": {
              "line": 181,
              "column": 60
            },
            "end": {
              "line": 181,
              "column": 72
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`name`",
          "raw": "`name`",
          "range": [
            6840,
            6846
          ],
          "loc": {
            "start": {
              "line": 181,
              "column": 72
            },
            "end": {
              "line": 181,
              "column": 78
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " prop. Notice that the props to be received are destructured from the global ",
          "raw": " prop. Notice that the props to be received are destructured from the global ",
          "range": [
            6846,
            6923
          ],
          "loc": {
            "start": {
              "line": 181,
              "column": 78
            },
            "end": {
              "line": 181,
              "column": 155
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`Astro.props`",
          "raw": "`Astro.props`",
          "range": [
            6923,
            6936
          ],
          "loc": {
            "start": {
              "line": 181,
              "column": 155
            },
            "end": {
              "line": 181,
              "column": 168
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " object.\n\n",
          "raw": " object.\n\n",
          "range": [
            6936,
            6946
          ],
          "loc": {
            "start": {
              "line": 181,
              "column": 168
            },
            "end": {
              "line": 183,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// Example: GreetingHeadline.astro\n// Usage: <GreetingHeadline greeting=\"Howdy\" name=\"Partner\" />\nconst { greeting, name } = Astro.props\n---\n<h2>{greeting}, {name}!</h2>\n```",
          "raw": "```astro\n---\n// Example: GreetingHeadline.astro\n// Usage: <GreetingHeadline greeting=\"Howdy\" name=\"Partner\" />\nconst { greeting, name } = Astro.props\n---\n<h2>{greeting}, {name}!</h2>\n```",
          "range": [
            6946,
            7132
          ],
          "loc": {
            "start": {
              "line": 183,
              "column": 0
            },
            "end": {
              "line": 190,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\nYou can also define your props with TypeScript by exporting a ",
          "raw": "\n\nYou can also define your props with TypeScript by exporting a ",
          "range": [
            7132,
            7196
          ],
          "loc": {
            "start": {
              "line": 190,
              "column": 3
            },
            "end": {
              "line": 192,
              "column": 62
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`Props`",
          "raw": "`Props`",
          "range": [
            7196,
            7203
          ],
          "loc": {
            "start": {
              "line": 192,
              "column": 62
            },
            "end": {
              "line": 192,
              "column": 69
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " type interface. Astro will automatically pick up any exported ",
          "raw": " type interface. Astro will automatically pick up any exported ",
          "range": [
            7203,
            7266
          ],
          "loc": {
            "start": {
              "line": 192,
              "column": 69
            },
            "end": {
              "line": 192,
              "column": 132
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`Props`",
          "raw": "`Props`",
          "range": [
            7266,
            7273
          ],
          "loc": {
            "start": {
              "line": 192,
              "column": 132
            },
            "end": {
              "line": 192,
              "column": 139
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " interface and give type warnings/errors for your project. These props can also be given default values when destructured from ",
          "raw": " interface and give type warnings/errors for your project. These props can also be given default values when destructured from ",
          "range": [
            7273,
            7400
          ],
          "loc": {
            "start": {
              "line": 192,
              "column": 139
            },
            "end": {
              "line": 192,
              "column": 266
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`Astro.props`",
          "raw": "`Astro.props`",
          "range": [
            7400,
            7413
          ],
          "loc": {
            "start": {
              "line": 192,
              "column": 266
            },
            "end": {
              "line": 192,
              "column": 279
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n",
          "raw": "\n\n",
          "range": [
            7413,
            7415
          ],
          "loc": {
            "start": {
              "line": 192,
              "column": 279
            },
            "end": {
              "line": 194,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// src/components/GreetingHeadline.astro\nexport interface Props {\n  name: string;\n  greeting?: string;\n}\n\nconst { greeting = \"Hello\", name } = Astro.props as Props;\n---\n<h2>{greeting}, {name}!</h2>\n```",
          "raw": "```astro\n---\n// src/components/GreetingHeadline.astro\nexport interface Props {\n  name: string;\n  greeting?: string;\n}\n\nconst { greeting = \"Hello\", name } = Astro.props as Props;\n---\n<h2>{greeting}, {name}!</h2>\n```",
          "range": [
            7415,
            7629
          ],
          "loc": {
            "start": {
              "line": 194,
              "column": 0
            },
            "end": {
              "line": 205,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\nThis component, when imported and rendered in other Astro components, layouts or pages, can be passed these props as attributes:\n\n",
          "raw": "\n\nThis component, when imported and rendered in other Astro components, layouts or pages, can be passed these props as attributes:\n\n",
          "range": [
            7629,
            7761
          ],
          "loc": {
            "start": {
              "line": 205,
              "column": 3
            },
            "end": {
              "line": 209,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// src/components/GreetingCard.astro\nimport GreetingHeadline from './GreetingHeadline.astro';\nconst name = \"Astro\"\n---\n<h1>Greeting Card</h1>\n<GreetingHeadline greeting=\"Hi\" name={name} />\n<p>I hope you have a wonderful day!</p>\n```",
          "raw": "```astro\n---\n// src/components/GreetingCard.astro\nimport GreetingHeadline from './GreetingHeadline.astro';\nconst name = \"Astro\"\n---\n<h1>Greeting Card</h1>\n<GreetingHeadline greeting=\"Hi\" name={name} />\n<p>I hope you have a wonderful day!</p>\n```",
          "range": [
            7761,
            8006
          ],
          "loc": {
            "start": {
              "line": 209,
              "column": 0
            },
            "end": {
              "line": 218,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n### Slots\n\nThe ",
          "raw": "\n\n### Slots\n\nThe ",
          "range": [
            8006,
            8023
          ],
          "loc": {
            "start": {
              "line": 218,
              "column": 3
            },
            "end": {
              "line": 222,
              "column": 4
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<slot />`",
          "raw": "`<slot />`",
          "range": [
            8023,
            8033
          ],
          "loc": {
            "start": {
              "line": 222,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 14
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " element is a placeholder for external HTML content, allowing you to inject (or \"slot\") child elements from other files into your component template.\n\nBy default, all child elements passed to a component will be rendered in its ",
          "raw": " element is a placeholder for external HTML content, allowing you to inject (or \"slot\") child elements from other files into your component template.\n\nBy default, all child elements passed to a component will be rendered in its ",
          "range": [
            8033,
            8261
          ],
          "loc": {
            "start": {
              "line": 222,
              "column": 14
            },
            "end": {
              "line": 224,
              "column": 77
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<slot />`",
          "raw": "`<slot />`",
          "range": [
            8261,
            8271
          ],
          "loc": {
            "start": {
              "line": 224,
              "column": 77
            },
            "end": {
              "line": 224,
              "column": 87
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n:::note\nUnlike _props_, which are attributes passed to an Astro component available for use throughout your component with ",
          "raw": "\n\n:::note\nUnlike _props_, which are attributes passed to an Astro component available for use throughout your component with ",
          "range": [
            8271,
            8396
          ],
          "loc": {
            "start": {
              "line": 224,
              "column": 87
            },
            "end": {
              "line": 227,
              "column": 115
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`Astro.props`",
          "raw": "`Astro.props`",
          "range": [
            8396,
            8409
          ],
          "loc": {
            "start": {
              "line": 227,
              "column": 115
            },
            "end": {
              "line": 227,
              "column": 128
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": ", _slots_ render child HTML elements where they are written.\n:::\n\n",
          "raw": ", _slots_ render child HTML elements where they are written.\n:::\n\n",
          "range": [
            8409,
            8475
          ],
          "loc": {
            "start": {
              "line": 227,
              "column": 128
            },
            "end": {
              "line": 230,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot />  <!-- children will go here -->\n  <Footer />\n</div>\n```",
          "raw": "```astro\n---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot />  <!-- children will go here -->\n  <Footer />\n</div>\n```",
          "range": [
            8475,
            8798
          ],
          "loc": {
            "start": {
              "line": 230,
              "column": 0
            },
            "end": {
              "line": 246,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n",
          "raw": "\n\n",
          "range": [
            8798,
            8800
          ],
          "loc": {
            "start": {
              "line": 246,
              "column": 3
            },
            "end": {
              "line": 248,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// src/pages/fred.astro\nimport Wrapper from '../components/Wrapper.astro';\n---\n<Wrapper title=\"Fred's Page\">\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n</Wrapper>\n```",
          "raw": "```astro\n---\n// src/pages/fred.astro\nimport Wrapper from '../components/Wrapper.astro';\n---\n<Wrapper title=\"Fred's Page\">\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n</Wrapper>\n```",
          "range": [
            8800,
            9002
          ],
          "loc": {
            "start": {
              "line": 248,
              "column": 0
            },
            "end": {
              "line": 257,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\nThis pattern is the basis of an Astro layout component: an entire page of HTML content can be “wrapped” with ",
          "raw": "\n\nThis pattern is the basis of an Astro layout component: an entire page of HTML content can be “wrapped” with ",
          "range": [
            9002,
            9113
          ],
          "loc": {
            "start": {
              "line": 257,
              "column": 3
            },
            "end": {
              "line": 259,
              "column": 109
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<Layout></Layout>`",
          "raw": "`<Layout></Layout>`",
          "range": [
            9113,
            9132
          ],
          "loc": {
            "start": {
              "line": 259,
              "column": 109
            },
            "end": {
              "line": 259,
              "column": 128
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " tags and sent to the Layout component to render inside of common page elements.\n\n\n\n#### Named Slots\n\nAn Astro component can also have named slots. This allows you to pass only HTML elements with the corresponding slot name into a slot's location.\n\n",
          "raw": " tags and sent to the Layout component to render inside of common page elements.\n\n\n\n#### Named Slots\n\nAn Astro component can also have named slots. This allows you to pass only HTML elements with the corresponding slot name into a slot's location.\n\n",
          "range": [
            9132,
            9381
          ],
          "loc": {
            "start": {
              "line": 259,
              "column": 128
            },
            "end": {
              "line": 267,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <slot name=\"after-header\"/>  <!--  children with the `slot=\"after-header\"` attribute will go here -->\n  <Logo />\n  <h1>{title}</h1>\n  <slot />  <!--  children without a `slot`, or with `slot=\"default\"` attribute will go here -->\n  <Footer />\n  <slot name=\"after-footer\"/>  <!--  children with the `slot=\"after-footer\"` attribute will go here -->\n</div>\n```",
          "raw": "```astro\n---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <slot name=\"after-header\"/>  <!--  children with the `slot=\"after-header\"` attribute will go here -->\n  <Logo />\n  <h1>{title}</h1>\n  <slot />  <!--  children without a `slot`, or with `slot=\"default\"` attribute will go here -->\n  <Footer />\n  <slot name=\"after-footer\"/>  <!--  children with the `slot=\"after-footer\"` attribute will go here -->\n</div>\n```",
          "range": [
            9381,
            9966
          ],
          "loc": {
            "start": {
              "line": 267,
              "column": 0
            },
            "end": {
              "line": 285,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n",
          "raw": "\n\n",
          "range": [
            9966,
            9968
          ],
          "loc": {
            "start": {
              "line": 285,
              "column": 3
            },
            "end": {
              "line": 287,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// src/pages/fred.astro\nimport Wrapper from '../components/Wrapper.astro';\n---\n<Wrapper title=\"Fred's Page\">\n  <img src=\"https://my.photo/fred.jpg\" slot=\"after-header\">\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n  <p slot=\"after-footer\">Copyright 2022</p>\n</Wrapper>\n```",
          "raw": "```astro\n---\n// src/pages/fred.astro\nimport Wrapper from '../components/Wrapper.astro';\n---\n<Wrapper title=\"Fred's Page\">\n  <img src=\"https://my.photo/fred.jpg\" slot=\"after-header\">\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n  <p slot=\"after-footer\">Copyright 2022</p>\n</Wrapper>\n```",
          "range": [
            9968,
            10274
          ],
          "loc": {
            "start": {
              "line": 287,
              "column": 0
            },
            "end": {
              "line": 298,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n\nUse a ",
          "raw": "\n\n\nUse a ",
          "range": [
            10274,
            10283
          ],
          "loc": {
            "start": {
              "line": 298,
              "column": 3
            },
            "end": {
              "line": 301,
              "column": 6
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`slot=\"my-slot\"`",
          "raw": "`slot=\"my-slot\"`",
          "range": [
            10283,
            10299
          ],
          "loc": {
            "start": {
              "line": 301,
              "column": 6
            },
            "end": {
              "line": 301,
              "column": 22
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " attribute on the child element that you want to pass through to a matching ",
          "raw": " attribute on the child element that you want to pass through to a matching ",
          "range": [
            10299,
            10375
          ],
          "loc": {
            "start": {
              "line": 301,
              "column": 22
            },
            "end": {
              "line": 301,
              "column": 98
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<slot name=\"my-slot\" />`",
          "raw": "`<slot name=\"my-slot\" />`",
          "range": [
            10375,
            10400
          ],
          "loc": {
            "start": {
              "line": 301,
              "column": 98
            },
            "end": {
              "line": 301,
              "column": 123
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " placeholder in your component.\n\n:::caution\nThis only works when you’re passing slots to other Astro components. Learn more about including other [UI framework components](/en/core-concepts/framework-components/) in Astro files.\n:::\n\n\n#### Fallback Content for Slots\nSlots can also render **fallback content**. When there are no matching children passed to a slot, a ",
          "raw": " placeholder in your component.\n\n:::caution\nThis only works when you’re passing slots to other Astro components. Learn more about including other [UI framework components](/en/core-concepts/framework-components/) in Astro files.\n:::\n\n\n#### Fallback Content for Slots\nSlots can also render **fallback content**. When there are no matching children passed to a slot, a ",
          "range": [
            10400,
            10767
          ],
          "loc": {
            "start": {
              "line": 301,
              "column": 123
            },
            "end": {
              "line": 309,
              "column": 100
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<slot />`",
          "raw": "`<slot />`",
          "range": [
            10767,
            10777
          ],
          "loc": {
            "start": {
              "line": 309,
              "column": 100
            },
            "end": {
              "line": 309,
              "column": 110
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " element will render its own placeholder children.\n\n",
          "raw": " element will render its own placeholder children.\n\n",
          "range": [
            10777,
            10829
          ],
          "loc": {
            "start": {
              "line": 309,
              "column": 110
            },
            "end": {
              "line": 311,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot>\n    <p>This is my fallback content, if there is no child passed into slot</p>\n  </slot>\n  <Footer />\n</div>\n```",
          "raw": "```astro\n---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot>\n    <p>This is my fallback content, if there is no child passed into slot</p>\n  </slot>\n  <Footer />\n</div>\n```",
          "range": [
            10829,
            11206
          ],
          "loc": {
            "start": {
              "line": 311,
              "column": 0
            },
            "end": {
              "line": 329,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n### CSS Styles\n\nCSS ",
          "raw": "\n\n### CSS Styles\n\nCSS ",
          "range": [
            11206,
            11228
          ],
          "loc": {
            "start": {
              "line": 329,
              "column": 3
            },
            "end": {
              "line": 333,
              "column": 4
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<style>`",
          "raw": "`<style>`",
          "range": [
            11228,
            11237
          ],
          "loc": {
            "start": {
              "line": 333,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 13
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " tags are also supported inside of the component template.\n\nThey can be used to style your components, and all style rules are automatically scoped to the component itself to prevent CSS conflicts in large apps.\n\n",
          "raw": " tags are also supported inside of the component template.\n\nThey can be used to style your components, and all style rules are automatically scoped to the component itself to prevent CSS conflicts in large apps.\n\n",
          "range": [
            11237,
            11450
          ],
          "loc": {
            "start": {
              "line": 333,
              "column": 13
            },
            "end": {
              "line": 337,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n---\n// Your component script here!\n---\n<style>\n  /* scoped to the component, other H1s on the page remain the same */\n  h1 { color: red }\n</style>\n\n<h1>Hello, world!</h1>\n```",
          "raw": "```astro\n---\n// Your component script here!\n---\n<style>\n  /* scoped to the component, other H1s on the page remain the same */\n  h1 { color: red }\n</style>\n\n<h1>Hello, world!</h1>\n```",
          "range": [
            11450,
            11633
          ],
          "loc": {
            "start": {
              "line": 337,
              "column": 0
            },
            "end": {
              "line": 347,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n:::caution\nThe styles defined here apply only to content written directly in the component's own component template. Children, and any imported components will **not** be styled by default.\n:::\n\n📚 See our [Styling Guide](/en/guides/styling/) for more information on applying styles.\n\n### Client-Side Scripts\n\nTo send JavaScript to the browser without [using a framework component](/en/core-concepts/framework-components/) (React, Svelte, Vue, Preact, SolidJS, AlpineJS, Lit) or an [Astro integration](https://astro.build/integrations/) (e.g. astro-XElement), you can use a ",
          "raw": "\n\n:::caution\nThe styles defined here apply only to content written directly in the component's own component template. Children, and any imported components will **not** be styled by default.\n:::\n\n📚 See our [Styling Guide](/en/guides/styling/) for more information on applying styles.\n\n### Client-Side Scripts\n\nTo send JavaScript to the browser without [using a framework component](/en/core-concepts/framework-components/) (React, Svelte, Vue, Preact, SolidJS, AlpineJS, Lit) or an [Astro integration](https://astro.build/integrations/) (e.g. astro-XElement), you can use a ",
          "range": [
            11633,
            12209
          ],
          "loc": {
            "start": {
              "line": 347,
              "column": 3
            },
            "end": {
              "line": 357,
              "column": 264
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<script>`",
          "raw": "`<script>`",
          "range": [
            12209,
            12219
          ],
          "loc": {
            "start": {
              "line": 357,
              "column": 264
            },
            "end": {
              "line": 357,
              "column": 274
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " tag in your Astro component template and send JavaScript to the browser that executes in the global scope.\n\nBy default, ",
          "raw": " tag in your Astro component template and send JavaScript to the browser that executes in the global scope.\n\nBy default, ",
          "range": [
            12219,
            12340
          ],
          "loc": {
            "start": {
              "line": 357,
              "column": 274
            },
            "end": {
              "line": 359,
              "column": 12
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<script>`",
          "raw": "`<script>`",
          "range": [
            12340,
            12350
          ],
          "loc": {
            "start": {
              "line": 359,
              "column": 12
            },
            "end": {
              "line": 359,
              "column": 22
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " tags are processed by Astro.\n\n- Any imports will be bundled, allowing you to import local files or Node modules.\n- The processed script will be injected into your page’s ",
          "raw": " tags are processed by Astro.\n\n- Any imports will be bundled, allowing you to import local files or Node modules.\n- The processed script will be injected into your page’s ",
          "range": [
            12350,
            12521
          ],
          "loc": {
            "start": {
              "line": 359,
              "column": 22
            },
            "end": {
              "line": 362,
              "column": 57
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<head>`",
          "raw": "`<head>`",
          "range": [
            12521,
            12529
          ],
          "loc": {
            "start": {
              "line": 362,
              "column": 57
            },
            "end": {
              "line": 362,
              "column": 65
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " with [",
          "raw": " with [",
          "range": [
            12529,
            12536
          ],
          "loc": {
            "start": {
              "line": 362,
              "column": 65
            },
            "end": {
              "line": 362,
              "column": 72
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`type=\"module\"`",
          "raw": "`type=\"module\"`",
          "range": [
            12536,
            12551
          ],
          "loc": {
            "start": {
              "line": 362,
              "column": 72
            },
            "end": {
              "line": 362,
              "column": 87
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n- If your component is used several times on a page, the script tag will only be included once.\n\n:::caution\nYou can’t currently write TypeScript in client-side scripts, but you _can_ import a Typescript file if you prefer writing with that syntax.\n:::\n\n",
          "raw": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n- If your component is used several times on a page, the script tag will only be included once.\n\n:::caution\nYou can’t currently write TypeScript in client-side scripts, but you _can_ import a Typescript file if you prefer writing with that syntax.\n:::\n\n",
          "range": [
            12551,
            12878
          ],
          "loc": {
            "start": {
              "line": 362,
              "column": 87
            },
            "end": {
              "line": 369,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n<script>\n  // Processed! Bundled! ESM imports work, even to npm packages.\n</script>\n```",
          "raw": "```astro\n<script>\n  // Processed! Bundled! ESM imports work, even to npm packages.\n</script>\n```",
          "range": [
            12878,
            12974
          ],
          "loc": {
            "start": {
              "line": 369,
              "column": 0
            },
            "end": {
              "line": 373,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\nTo avoid bundling the script, you can use the ",
          "raw": "\n\nTo avoid bundling the script, you can use the ",
          "range": [
            12974,
            13022
          ],
          "loc": {
            "start": {
              "line": 373,
              "column": 3
            },
            "end": {
              "line": 375,
              "column": 46
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`is:inline`",
          "raw": "`is:inline`",
          "range": [
            13022,
            13033
          ],
          "loc": {
            "start": {
              "line": 375,
              "column": 46
            },
            "end": {
              "line": 375,
              "column": 57
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " attribute.\n\n",
          "raw": " attribute.\n\n",
          "range": [
            13033,
            13046
          ],
          "loc": {
            "start": {
              "line": 375,
              "column": 57
            },
            "end": {
              "line": 377,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n<script is:inline>\n  // Will be rendered into the HTML exactly as written!\n  // ESM imports will not be resolved relative to the file.\n</script>\n```",
          "raw": "```astro\n<script is:inline>\n  // Will be rendered into the HTML exactly as written!\n  // ESM imports will not be resolved relative to the file.\n</script>\n```",
          "range": [
            13046,
            13203
          ],
          "loc": {
            "start": {
              "line": 377,
              "column": 0
            },
            "end": {
              "line": 382,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\nMultiple ",
          "raw": "\n\nMultiple ",
          "range": [
            13203,
            13214
          ],
          "loc": {
            "start": {
              "line": 382,
              "column": 3
            },
            "end": {
              "line": 384,
              "column": 9
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<script>`",
          "raw": "`<script>`",
          "range": [
            13214,
            13224
          ],
          "loc": {
            "start": {
              "line": 384,
              "column": 9
            },
            "end": {
              "line": 384,
              "column": 19
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " tags can be used in the same ",
          "raw": " tags can be used in the same ",
          "range": [
            13224,
            13254
          ],
          "loc": {
            "start": {
              "line": 384,
              "column": 19
            },
            "end": {
              "line": 384,
              "column": 49
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`.astro`",
          "raw": "`.astro`",
          "range": [
            13254,
            13262
          ],
          "loc": {
            "start": {
              "line": 384,
              "column": 49
            },
            "end": {
              "line": 384,
              "column": 57
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " file using any combination of the methods above.\n\n:::note\nAdding ",
          "raw": " file using any combination of the methods above.\n\n:::note\nAdding ",
          "range": [
            13262,
            13328
          ],
          "loc": {
            "start": {
              "line": 384,
              "column": 57
            },
            "end": {
              "line": 387,
              "column": 7
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`type=\"module\"`",
          "raw": "`type=\"module\"`",
          "range": [
            13328,
            13343
          ],
          "loc": {
            "start": {
              "line": 387,
              "column": 7
            },
            "end": {
              "line": 387,
              "column": 22
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " or any other attribute to a ",
          "raw": " or any other attribute to a ",
          "range": [
            13343,
            13372
          ],
          "loc": {
            "start": {
              "line": 387,
              "column": 22
            },
            "end": {
              "line": 387,
              "column": 51
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<script>`",
          "raw": "`<script>`",
          "range": [
            13372,
            13382
          ],
          "loc": {
            "start": {
              "line": 387,
              "column": 51
            },
            "end": {
              "line": 387,
              "column": 61
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " tag will disable Astro's default bundling behavior, treating the tag as if it had an ",
          "raw": " tag will disable Astro's default bundling behavior, treating the tag as if it had an ",
          "range": [
            13382,
            13468
          ],
          "loc": {
            "start": {
              "line": 387,
              "column": 61
            },
            "end": {
              "line": 387,
              "column": 147
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`is:inline`",
          "raw": "`is:inline`",
          "range": [
            13468,
            13479
          ],
          "loc": {
            "start": {
              "line": 387,
              "column": 147
            },
            "end": {
              "line": 387,
              "column": 158
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " directive.\n:::\n\n📚 See our [directives reference](/en/reference/directives-reference/#script--style-directives) page for more information about the directives available on ",
          "raw": " directive.\n:::\n\n📚 See our [directives reference](/en/reference/directives-reference/#script--style-directives) page for more information about the directives available on ",
          "range": [
            13479,
            13652
          ],
          "loc": {
            "start": {
              "line": 387,
              "column": 158
            },
            "end": {
              "line": 390,
              "column": 156
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`<script>`",
          "raw": "`<script>`",
          "range": [
            13652,
            13662
          ],
          "loc": {
            "start": {
              "line": 390,
              "column": 156
            },
            "end": {
              "line": 390,
              "column": 166
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " tags.\n\n#### Loading External Scripts\n\n**When to use this:** If your JavaScript file lives inside of ",
          "raw": " tags.\n\n#### Loading External Scripts\n\n**When to use this:** If your JavaScript file lives inside of ",
          "range": [
            13662,
            13763
          ],
          "loc": {
            "start": {
              "line": 390,
              "column": 166
            },
            "end": {
              "line": 394,
              "column": 62
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`public/`",
          "raw": "`public/`",
          "range": [
            13763,
            13772
          ],
          "loc": {
            "start": {
              "line": 394,
              "column": 62
            },
            "end": {
              "line": 394,
              "column": 71
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": ".\n\nNote that this approach skips the JavaScript processing, bundling and optimizations that are provided by Astro when you use the ",
          "raw": ".\n\nNote that this approach skips the JavaScript processing, bundling and optimizations that are provided by Astro when you use the ",
          "range": [
            13772,
            13903
          ],
          "loc": {
            "start": {
              "line": 394,
              "column": 71
            },
            "end": {
              "line": 396,
              "column": 128
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`import`",
          "raw": "`import`",
          "range": [
            13903,
            13911
          ],
          "loc": {
            "start": {
              "line": 396,
              "column": 128
            },
            "end": {
              "line": 396,
              "column": 136
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " method described below.\n\n",
          "raw": " method described below.\n\n",
          "range": [
            13911,
            13937
          ],
          "loc": {
            "start": {
              "line": 396,
              "column": 136
            },
            "end": {
              "line": 398,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n// absolute URL path\n<script is:inline src=\"/some-external-script.js\"></script>\n```",
          "raw": "```astro\n// absolute URL path\n<script is:inline src=\"/some-external-script.js\"></script>\n```",
          "range": [
            13937,
            14029
          ],
          "loc": {
            "start": {
              "line": 398,
              "column": 0
            },
            "end": {
              "line": 401,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n#### Using Hoisted Scripts\n\n**When to use this:** If your external script lives inside of ",
          "raw": "\n#### Using Hoisted Scripts\n\n**When to use this:** If your external script lives inside of ",
          "range": [
            14029,
            14120
          ],
          "loc": {
            "start": {
              "line": 401,
              "column": 3
            },
            "end": {
              "line": 404,
              "column": 62
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "`src/`",
          "raw": "`src/`",
          "range": [
            14120,
            14126
          ],
          "loc": {
            "start": {
              "line": 404,
              "column": 62
            },
            "end": {
              "line": 404,
              "column": 68
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": " _and_ it supports the ESM module type.\n\nAstro detects these JavaScript client-side imports and then builds, optimizes, and adds the JS to the page automatically.\n\n",
          "raw": " _and_ it supports the ESM module type.\n\nAstro detects these JavaScript client-side imports and then builds, optimizes, and adds the JS to the page automatically.\n\n",
          "range": [
            14126,
            14290
          ],
          "loc": {
            "start": {
              "line": 404,
              "column": 68
            },
            "end": {
              "line": 408,
              "column": 0
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "```astro\n// ESM import\n<script>\n  import './some-external-script.js';\n</script>\n```",
          "raw": "```astro\n// ESM import\n<script>\n  import './some-external-script.js';\n</script>\n```",
          "range": [
            14290,
            14373
          ],
          "loc": {
            "start": {
              "line": 408,
              "column": 0
            },
            "end": {
              "line": 413,
              "column": 3
            }
          }
        },
        {
          "type": "AstroRawText",
          "value": "\n\n\n## Next Steps\n\n📚 Read about [Astro's built-in components](/en/reference/api-reference/#built-in-components).\n\n📚 Learn about using [JavaScript framework components](/en/core-concepts/framework-components/) in your Astro project.\n",
          "raw": "\n\n\n## Next Steps\n\n📚 Read about [Astro's built-in components](/en/reference/api-reference/#built-in-components).\n\n📚 Learn about using [JavaScript framework components](/en/core-concepts/framework-components/) in your Astro project.\n",
          "range": [
            14373,
            14606
          ],
          "loc": {
            "start": {
              "line": 413,
              "column": 3
            },
            "end": {
              "line": 421,
              "column": 0
            }
          }
        }
      ],
      "range": [
        130,
        14606
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 3
        },
        "end": {
          "line": 421,
          "column": 0
        }
      }
    }
  ],
  "sourceType": "module",
  "comments": [],
  "tokens": [
    {
      "type": "Punctuator",
      "value": "---",
      "range": [
        0,
        3
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 3
        }
      }
    },
    {
      "type": "YAMLToken",
      "value": "layout: ~/layouts/MainLayout.astro\ntitle: Components\ndescription: An intro to the .astro component syntax.\ni18nReady: true",
      "range": [
        4,
        126
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 15
        }
      }
    },
    {
      "type": "Punctuator",
      "value": "---",
      "range": [
        127,
        130
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n**Astro components** are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime.\n\nAstro component syntax is a superset of HTML. The syntax was [designed to feel familiar to anyone with experience writing HTML or JSX](/en/comparing-astro-vs-other-tools/#astro-vs-jsx), and adds support for including components and JavaScript expressions. You can spot an Astro component by its file extension: ",
      "range": [
        130,
        587
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 3
        },
        "end": {
          "line": 10,
          "column": 311
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`.astro`",
      "range": [
        587,
        595
      ],
      "loc": {
        "start": {
          "line": 10,
          "column": 311
        },
        "end": {
          "line": 10,
          "column": 319
        }
      }
    },
    {
      "type": "JSXText",
      "value": ".\n\nAstro components are extremely flexible. Often, an Astro component will contain some **reusable UI on the page**, like a header or a profile card. At other times, an Astro component may contain a smaller snippet of HTML, like a collection of common ",
      "range": [
        595,
        847
      ],
      "loc": {
        "start": {
          "line": 10,
          "column": 319
        },
        "end": {
          "line": 12,
          "column": 249
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<meta>`",
      "range": [
        847,
        855
      ],
      "loc": {
        "start": {
          "line": 12,
          "column": 249
        },
        "end": {
          "line": 12,
          "column": 257
        }
      }
    },
    {
      "type": "JSXText",
      "value": " tags that make SEO easy to work with. Astro components can even contain an entire page layout.\n\nThe most important thing to know about Astro components is that they **render to HTML during your build.** Even if you run JavaScript code inside of your components, it will all run ahead-of-time, stripped from the final page that you send to your users. The result is a faster site, with zero JavaScript footprint added by default.\n\n\n## Component Overview\n\nAn Astro component is made up of two main parts: the **Component Script** and the **Component Template**. Each part performs a different job, but together they aim to provide a framework that is both easy to use and expressive enough to handle whatever you might want to build.\n\n",
      "range": [
        855,
        1589
      ],
      "loc": {
        "start": {
          "line": 12,
          "column": 257
        },
        "end": {
          "line": 21,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// Component Script (JavaScript)\n---\n<!-- Component Template (HTML + JS Expressions) -->\n```",
      "range": [
        1589,
        1694
      ],
      "loc": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\nYou can use components inside of other components, to build more and more advanced UI. For example, a ",
      "range": [
        1694,
        1798
      ],
      "loc": {
        "start": {
          "line": 26,
          "column": 3
        },
        "end": {
          "line": 28,
          "column": 102
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`Button`",
      "range": [
        1798,
        1806
      ],
      "loc": {
        "start": {
          "line": 28,
          "column": 102
        },
        "end": {
          "line": 28,
          "column": 110
        }
      }
    },
    {
      "type": "JSXText",
      "value": " component could be used to create a ",
      "range": [
        1806,
        1843
      ],
      "loc": {
        "start": {
          "line": 28,
          "column": 110
        },
        "end": {
          "line": 28,
          "column": 147
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`ButtonGroup`",
      "range": [
        1843,
        1856
      ],
      "loc": {
        "start": {
          "line": 28,
          "column": 147
        },
        "end": {
          "line": 28,
          "column": 160
        }
      }
    },
    {
      "type": "JSXText",
      "value": " component like so:\n\n",
      "range": [
        1856,
        1877
      ],
      "loc": {
        "start": {
          "line": 28,
          "column": 160
        },
        "end": {
          "line": 30,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// Example: ButtonGroup.astro\nimport Button from './Button.astro';\n---\n<div>\n  <Button title=\"Button 1\" />\n  <Button title=\"Button 2\" />\n  <Button title=\"Button 3\" />\n</div>\n```",
      "range": [
        1877,
        2067
      ],
      "loc": {
        "start": {
          "line": 30,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n\n### The Component Script\n\nAstro uses a code fence (",
      "range": [
        2067,
        2121
      ],
      "loc": {
        "start": {
          "line": 40,
          "column": 3
        },
        "end": {
          "line": 45,
          "column": 25
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`---`",
      "range": [
        2121,
        2126
      ],
      "loc": {
        "start": {
          "line": 45,
          "column": 25
        },
        "end": {
          "line": 45,
          "column": 30
        }
      }
    },
    {
      "type": "JSXText",
      "value": ") to identify the component script in your Astro component. If you've ever written Markdown before, you may already be familiar with a similar concept called *frontmatter.* Astro's idea of a component script was directly inspired by this concept.\n\nYou can use the component script to write any JavaScript code that you need to render your template. This can include:\n\n- Importing other Astro components\n- Importing other framework components, like React\n- Importing data, like a JSON file\n- fetching content from an API or database\n- creating variables that you will reference in your template\n\n\n",
      "range": [
        2126,
        2722
      ],
      "loc": {
        "start": {
          "line": 45,
          "column": 30
        },
        "end": {
          "line": 56,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// Note: Imports must live at the top of your file.\nimport SomeAstroComponent from '../components/SomeAstroComponent.astro';\nimport SomeReactComponent from '../components/SomeReactComponent.jsx';\nimport someData from '../data/pokemon.json';\n\n// Access passed-in component props, like `<X title=\"Hello, World\" />`\nconst {title} = Astro.props;\n// Fetch external data, even from a private API or database\nconst data = await fetch('SOME_SECRET_API_URL/users').then(r => r.json());\n---\n<!-- Your template here! -->\n```",
      "range": [
        2722,
        3248
      ],
      "loc": {
        "start": {
          "line": 56,
          "column": 0
        },
        "end": {
          "line": 69,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\nThe code fence is designed to guarantee that the JavaScript that you write in it is \"fenced in.\" It won't escape into your frontend application, or fall into your users hands. You can safely write code here that is expensive or sensitive (like a call to your private database) without worrying about it ever ending up in your user's browser.\n\n:::tip\nYou can even write TypeScript in your component script!\n:::\n\n### The Component Template\n\nBelow the component script, sits the component template. The component template decides the HTML output of your component.\n\nIf you write plain HTML here, your component will render that HTML in any Astro page it is imported and used.\n\nHowever, Astro's component template syntax also supports **JavaScript expressions**, **imported components** and [**special Astro directives**](/en/reference/directives-reference/). Data and values defined (at page build time) in the component script can be used in the component template to produce dynamically-created HTML.\n\n",
      "range": [
        3248,
        4251
      ],
      "loc": {
        "start": {
          "line": 69,
          "column": 3
        },
        "end": {
          "line": 85,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// Your component script here!\nimport ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';\nconst myFavoritePokemon = [/* ... */];\n---\n<!-- HTML comments supported! -->\n\n<h1>Hello, world!</h1>\n\n<!-- Use props and other variables from the component script: -->\n<p>My favorite pokemon is: {Astro.props.title}</p>\n\n<!-- Include other components with a `client:` directive to hydrate: -->\n<ReactPokemonComponent client:visible />\n\n<!-- Mix HTML with JavaScript expressions, similar to JSX: -->\n<ul>\n  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}\n<ul>\n\n<!-- Use a template directive to inject an unescaped HTML string into an element: -->\n<p set:html={rawHTMLString} />\n```",
      "range": [
        4251,
        4959
      ],
      "loc": {
        "start": {
          "line": 85,
          "column": 0
        },
        "end": {
          "line": 108,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n### Dynamic JSX Expressions\n\nAstro components can define local variables inside of the frontmatter component script. Any script variables are then automatically available in the component's HTML template below.\n\n#### Dynamic Values\n\nThese local variables can be used in curly braces to pass values to be used as HTML output:\n\n",
      "range": [
        4959,
        5287
      ],
      "loc": {
        "start": {
          "line": 108,
          "column": 3
        },
        "end": {
          "line": 118,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\nconst name = \"Astro\";\n---\n<div>\n  <h1>Hello {name}!</h1>\n</div>\n```",
      "range": [
        5287,
        5367
      ],
      "loc": {
        "start": {
          "line": 118,
          "column": 0
        },
        "end": {
          "line": 125,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n#### Dynamic Attributes\n\nThese local variables can be used in curly braces to pass attribute values to HTML elements and components:\n\n",
      "range": [
        5367,
        5503
      ],
      "loc": {
        "start": {
          "line": 125,
          "column": 3
        },
        "end": {
          "line": 131,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\nconst name = \"Astro\";\n---\n<h1 class={name}>Attribute expressions are supported</h1>\n\n<MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} />\n```",
      "range": [
        5503,
        5669
      ],
      "loc": {
        "start": {
          "line": 131,
          "column": 0
        },
        "end": {
          "line": 138,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n#### Dynamic HTML\n\nThese local variables can be used in JSX-like functions to produce dynamically-generated HTML elements:\n\n",
      "range": [
        5669,
        5795
      ],
      "loc": {
        "start": {
          "line": 138,
          "column": 3
        },
        "end": {
          "line": 144,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\nconst items = [\"Dog\", \"Cat\", \"Platypus\"];\n---\n<ul>\n  {items.map((item) => (\n    <li>{item}</li>\n  ))}\n</ul>\n```",
      "range": [
        5795,
        5919
      ],
      "loc": {
        "start": {
          "line": 144,
          "column": 0
        },
        "end": {
          "line": 153,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n#### Fragments & Multiple Elements\n\nRemember: an Astro component template can render multiple elements with no need to wrap everything in a single ",
      "range": [
        5919,
        6068
      ],
      "loc": {
        "start": {
          "line": 153,
          "column": 3
        },
        "end": {
          "line": 157,
          "column": 111
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<div>`",
      "range": [
        6068,
        6075
      ],
      "loc": {
        "start": {
          "line": 157,
          "column": 111
        },
        "end": {
          "line": 157,
          "column": 118
        }
      }
    },
    {
      "type": "JSXText",
      "value": " or ",
      "range": [
        6075,
        6079
      ],
      "loc": {
        "start": {
          "line": 157,
          "column": 118
        },
        "end": {
          "line": 157,
          "column": 122
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<>`",
      "range": [
        6079,
        6083
      ],
      "loc": {
        "start": {
          "line": 157,
          "column": 122
        },
        "end": {
          "line": 157,
          "column": 126
        }
      }
    },
    {
      "type": "JSXText",
      "value": ".\n\nHowever, when using an Astro JSX-like expression to dynamically create elements, you must wrap these multiple elements inside of a **Fragment** just like you would in JavaScript or JSX. Astro supports using either ",
      "range": [
        6083,
        6300
      ],
      "loc": {
        "start": {
          "line": 157,
          "column": 126
        },
        "end": {
          "line": 159,
          "column": 214
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<Fragment> </Fragment>`",
      "range": [
        6300,
        6324
      ],
      "loc": {
        "start": {
          "line": 159,
          "column": 214
        },
        "end": {
          "line": 159,
          "column": 238
        }
      }
    },
    {
      "type": "JSXText",
      "value": " or ",
      "range": [
        6324,
        6328
      ],
      "loc": {
        "start": {
          "line": 159,
          "column": 238
        },
        "end": {
          "line": 159,
          "column": 242
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<> </>`",
      "range": [
        6328,
        6336
      ],
      "loc": {
        "start": {
          "line": 159,
          "column": 242
        },
        "end": {
          "line": 159,
          "column": 250
        }
      }
    },
    {
      "type": "JSXText",
      "value": ".\n\n",
      "range": [
        6336,
        6339
      ],
      "loc": {
        "start": {
          "line": 159,
          "column": 250
        },
        "end": {
          "line": 161,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\nconst items = [\"Dog\", \"Cat\", \"Platypus\"];\n---\n<ul>\n  {items.map((item) => (\n    <>\n      <li>Red {item}</li>\n      <li>Blue {item}</li>\n      <li>Green {item}</li>\n    </>\n  ))}\n</ul>\n```",
      "range": [
        6339,
        6539
      ],
      "loc": {
        "start": {
          "line": 161,
          "column": 0
        },
        "end": {
          "line": 174,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n\n### Component Props\n\nAn Astro component can define and accept props. These props then become available to the component template for rendering HTML. Props are available on the ",
      "range": [
        6539,
        6718
      ],
      "loc": {
        "start": {
          "line": 174,
          "column": 3
        },
        "end": {
          "line": 179,
          "column": 155
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`Astro.props`",
      "range": [
        6718,
        6731
      ],
      "loc": {
        "start": {
          "line": 179,
          "column": 155
        },
        "end": {
          "line": 179,
          "column": 168
        }
      }
    },
    {
      "type": "JSXText",
      "value": " global in your frontmatter script.\n\nHere is an example of a component that receives a ",
      "range": [
        6731,
        6818
      ],
      "loc": {
        "start": {
          "line": 179,
          "column": 168
        },
        "end": {
          "line": 181,
          "column": 50
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`greeting`",
      "range": [
        6818,
        6828
      ],
      "loc": {
        "start": {
          "line": 181,
          "column": 50
        },
        "end": {
          "line": 181,
          "column": 60
        }
      }
    },
    {
      "type": "JSXText",
      "value": " prop and a ",
      "range": [
        6828,
        6840
      ],
      "loc": {
        "start": {
          "line": 181,
          "column": 60
        },
        "end": {
          "line": 181,
          "column": 72
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`name`",
      "range": [
        6840,
        6846
      ],
      "loc": {
        "start": {
          "line": 181,
          "column": 72
        },
        "end": {
          "line": 181,
          "column": 78
        }
      }
    },
    {
      "type": "JSXText",
      "value": " prop. Notice that the props to be received are destructured from the global ",
      "range": [
        6846,
        6923
      ],
      "loc": {
        "start": {
          "line": 181,
          "column": 78
        },
        "end": {
          "line": 181,
          "column": 155
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`Astro.props`",
      "range": [
        6923,
        6936
      ],
      "loc": {
        "start": {
          "line": 181,
          "column": 155
        },
        "end": {
          "line": 181,
          "column": 168
        }
      }
    },
    {
      "type": "JSXText",
      "value": " object.\n\n",
      "range": [
        6936,
        6946
      ],
      "loc": {
        "start": {
          "line": 181,
          "column": 168
        },
        "end": {
          "line": 183,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// Example: GreetingHeadline.astro\n// Usage: <GreetingHeadline greeting=\"Howdy\" name=\"Partner\" />\nconst { greeting, name } = Astro.props\n---\n<h2>{greeting}, {name}!</h2>\n```",
      "range": [
        6946,
        7132
      ],
      "loc": {
        "start": {
          "line": 183,
          "column": 0
        },
        "end": {
          "line": 190,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\nYou can also define your props with TypeScript by exporting a ",
      "range": [
        7132,
        7196
      ],
      "loc": {
        "start": {
          "line": 190,
          "column": 3
        },
        "end": {
          "line": 192,
          "column": 62
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`Props`",
      "range": [
        7196,
        7203
      ],
      "loc": {
        "start": {
          "line": 192,
          "column": 62
        },
        "end": {
          "line": 192,
          "column": 69
        }
      }
    },
    {
      "type": "JSXText",
      "value": " type interface. Astro will automatically pick up any exported ",
      "range": [
        7203,
        7266
      ],
      "loc": {
        "start": {
          "line": 192,
          "column": 69
        },
        "end": {
          "line": 192,
          "column": 132
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`Props`",
      "range": [
        7266,
        7273
      ],
      "loc": {
        "start": {
          "line": 192,
          "column": 132
        },
        "end": {
          "line": 192,
          "column": 139
        }
      }
    },
    {
      "type": "JSXText",
      "value": " interface and give type warnings/errors for your project. These props can also be given default values when destructured from ",
      "range": [
        7273,
        7400
      ],
      "loc": {
        "start": {
          "line": 192,
          "column": 139
        },
        "end": {
          "line": 192,
          "column": 266
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`Astro.props`",
      "range": [
        7400,
        7413
      ],
      "loc": {
        "start": {
          "line": 192,
          "column": 266
        },
        "end": {
          "line": 192,
          "column": 279
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n",
      "range": [
        7413,
        7415
      ],
      "loc": {
        "start": {
          "line": 192,
          "column": 279
        },
        "end": {
          "line": 194,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// src/components/GreetingHeadline.astro\nexport interface Props {\n  name: string;\n  greeting?: string;\n}\n\nconst { greeting = \"Hello\", name } = Astro.props as Props;\n---\n<h2>{greeting}, {name}!</h2>\n```",
      "range": [
        7415,
        7629
      ],
      "loc": {
        "start": {
          "line": 194,
          "column": 0
        },
        "end": {
          "line": 205,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\nThis component, when imported and rendered in other Astro components, layouts or pages, can be passed these props as attributes:\n\n",
      "range": [
        7629,
        7761
      ],
      "loc": {
        "start": {
          "line": 205,
          "column": 3
        },
        "end": {
          "line": 209,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// src/components/GreetingCard.astro\nimport GreetingHeadline from './GreetingHeadline.astro';\nconst name = \"Astro\"\n---\n<h1>Greeting Card</h1>\n<GreetingHeadline greeting=\"Hi\" name={name} />\n<p>I hope you have a wonderful day!</p>\n```",
      "range": [
        7761,
        8006
      ],
      "loc": {
        "start": {
          "line": 209,
          "column": 0
        },
        "end": {
          "line": 218,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n### Slots\n\nThe ",
      "range": [
        8006,
        8023
      ],
      "loc": {
        "start": {
          "line": 218,
          "column": 3
        },
        "end": {
          "line": 222,
          "column": 4
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<slot />`",
      "range": [
        8023,
        8033
      ],
      "loc": {
        "start": {
          "line": 222,
          "column": 4
        },
        "end": {
          "line": 222,
          "column": 14
        }
      }
    },
    {
      "type": "JSXText",
      "value": " element is a placeholder for external HTML content, allowing you to inject (or \"slot\") child elements from other files into your component template.\n\nBy default, all child elements passed to a component will be rendered in its ",
      "range": [
        8033,
        8261
      ],
      "loc": {
        "start": {
          "line": 222,
          "column": 14
        },
        "end": {
          "line": 224,
          "column": 77
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<slot />`",
      "range": [
        8261,
        8271
      ],
      "loc": {
        "start": {
          "line": 224,
          "column": 77
        },
        "end": {
          "line": 224,
          "column": 87
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n:::note\nUnlike _props_, which are attributes passed to an Astro component available for use throughout your component with ",
      "range": [
        8271,
        8396
      ],
      "loc": {
        "start": {
          "line": 224,
          "column": 87
        },
        "end": {
          "line": 227,
          "column": 115
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`Astro.props`",
      "range": [
        8396,
        8409
      ],
      "loc": {
        "start": {
          "line": 227,
          "column": 115
        },
        "end": {
          "line": 227,
          "column": 128
        }
      }
    },
    {
      "type": "JSXText",
      "value": ", _slots_ render child HTML elements where they are written.\n:::\n\n",
      "range": [
        8409,
        8475
      ],
      "loc": {
        "start": {
          "line": 227,
          "column": 128
        },
        "end": {
          "line": 230,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot />  <!-- children will go here -->\n  <Footer />\n</div>\n```",
      "range": [
        8475,
        8798
      ],
      "loc": {
        "start": {
          "line": 230,
          "column": 0
        },
        "end": {
          "line": 246,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n",
      "range": [
        8798,
        8800
      ],
      "loc": {
        "start": {
          "line": 246,
          "column": 3
        },
        "end": {
          "line": 248,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// src/pages/fred.astro\nimport Wrapper from '../components/Wrapper.astro';\n---\n<Wrapper title=\"Fred's Page\">\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n</Wrapper>\n```",
      "range": [
        8800,
        9002
      ],
      "loc": {
        "start": {
          "line": 248,
          "column": 0
        },
        "end": {
          "line": 257,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\nThis pattern is the basis of an Astro layout component: an entire page of HTML content can be “wrapped” with ",
      "range": [
        9002,
        9113
      ],
      "loc": {
        "start": {
          "line": 257,
          "column": 3
        },
        "end": {
          "line": 259,
          "column": 109
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<Layout></Layout>`",
      "range": [
        9113,
        9132
      ],
      "loc": {
        "start": {
          "line": 259,
          "column": 109
        },
        "end": {
          "line": 259,
          "column": 128
        }
      }
    },
    {
      "type": "JSXText",
      "value": " tags and sent to the Layout component to render inside of common page elements.\n\n\n\n#### Named Slots\n\nAn Astro component can also have named slots. This allows you to pass only HTML elements with the corresponding slot name into a slot's location.\n\n",
      "range": [
        9132,
        9381
      ],
      "loc": {
        "start": {
          "line": 259,
          "column": 128
        },
        "end": {
          "line": 267,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <slot name=\"after-header\"/>  <!--  children with the `slot=\"after-header\"` attribute will go here -->\n  <Logo />\n  <h1>{title}</h1>\n  <slot />  <!--  children without a `slot`, or with `slot=\"default\"` attribute will go here -->\n  <Footer />\n  <slot name=\"after-footer\"/>  <!--  children with the `slot=\"after-footer\"` attribute will go here -->\n</div>\n```",
      "range": [
        9381,
        9966
      ],
      "loc": {
        "start": {
          "line": 267,
          "column": 0
        },
        "end": {
          "line": 285,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n",
      "range": [
        9966,
        9968
      ],
      "loc": {
        "start": {
          "line": 285,
          "column": 3
        },
        "end": {
          "line": 287,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// src/pages/fred.astro\nimport Wrapper from '../components/Wrapper.astro';\n---\n<Wrapper title=\"Fred's Page\">\n  <img src=\"https://my.photo/fred.jpg\" slot=\"after-header\">\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n  <p slot=\"after-footer\">Copyright 2022</p>\n</Wrapper>\n```",
      "range": [
        9968,
        10274
      ],
      "loc": {
        "start": {
          "line": 287,
          "column": 0
        },
        "end": {
          "line": 298,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n\nUse a ",
      "range": [
        10274,
        10283
      ],
      "loc": {
        "start": {
          "line": 298,
          "column": 3
        },
        "end": {
          "line": 301,
          "column": 6
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`slot=\"my-slot\"`",
      "range": [
        10283,
        10299
      ],
      "loc": {
        "start": {
          "line": 301,
          "column": 6
        },
        "end": {
          "line": 301,
          "column": 22
        }
      }
    },
    {
      "type": "JSXText",
      "value": " attribute on the child element that you want to pass through to a matching ",
      "range": [
        10299,
        10375
      ],
      "loc": {
        "start": {
          "line": 301,
          "column": 22
        },
        "end": {
          "line": 301,
          "column": 98
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<slot name=\"my-slot\" />`",
      "range": [
        10375,
        10400
      ],
      "loc": {
        "start": {
          "line": 301,
          "column": 98
        },
        "end": {
          "line": 301,
          "column": 123
        }
      }
    },
    {
      "type": "JSXText",
      "value": " placeholder in your component.\n\n:::caution\nThis only works when you’re passing slots to other Astro components. Learn more about including other [UI framework components](/en/core-concepts/framework-components/) in Astro files.\n:::\n\n\n#### Fallback Content for Slots\nSlots can also render **fallback content**. When there are no matching children passed to a slot, a ",
      "range": [
        10400,
        10767
      ],
      "loc": {
        "start": {
          "line": 301,
          "column": 123
        },
        "end": {
          "line": 309,
          "column": 100
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<slot />`",
      "range": [
        10767,
        10777
      ],
      "loc": {
        "start": {
          "line": 309,
          "column": 100
        },
        "end": {
          "line": 309,
          "column": 110
        }
      }
    },
    {
      "type": "JSXText",
      "value": " element will render its own placeholder children.\n\n",
      "range": [
        10777,
        10829
      ],
      "loc": {
        "start": {
          "line": 309,
          "column": 110
        },
        "end": {
          "line": 311,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot>\n    <p>This is my fallback content, if there is no child passed into slot</p>\n  </slot>\n  <Footer />\n</div>\n```",
      "range": [
        10829,
        11206
      ],
      "loc": {
        "start": {
          "line": 311,
          "column": 0
        },
        "end": {
          "line": 329,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n### CSS Styles\n\nCSS ",
      "range": [
        11206,
        11228
      ],
      "loc": {
        "start": {
          "line": 329,
          "column": 3
        },
        "end": {
          "line": 333,
          "column": 4
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<style>`",
      "range": [
        11228,
        11237
      ],
      "loc": {
        "start": {
          "line": 333,
          "column": 4
        },
        "end": {
          "line": 333,
          "column": 13
        }
      }
    },
    {
      "type": "JSXText",
      "value": " tags are also supported inside of the component template.\n\nThey can be used to style your components, and all style rules are automatically scoped to the component itself to prevent CSS conflicts in large apps.\n\n",
      "range": [
        11237,
        11450
      ],
      "loc": {
        "start": {
          "line": 333,
          "column": 13
        },
        "end": {
          "line": 337,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n---\n// Your component script here!\n---\n<style>\n  /* scoped to the component, other H1s on the page remain the same */\n  h1 { color: red }\n</style>\n\n<h1>Hello, world!</h1>\n```",
      "range": [
        11450,
        11633
      ],
      "loc": {
        "start": {
          "line": 337,
          "column": 0
        },
        "end": {
          "line": 347,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n:::caution\nThe styles defined here apply only to content written directly in the component's own component template. Children, and any imported components will **not** be styled by default.\n:::\n\n📚 See our [Styling Guide](/en/guides/styling/) for more information on applying styles.\n\n### Client-Side Scripts\n\nTo send JavaScript to the browser without [using a framework component](/en/core-concepts/framework-components/) (React, Svelte, Vue, Preact, SolidJS, AlpineJS, Lit) or an [Astro integration](https://astro.build/integrations/) (e.g. astro-XElement), you can use a ",
      "range": [
        11633,
        12209
      ],
      "loc": {
        "start": {
          "line": 347,
          "column": 3
        },
        "end": {
          "line": 357,
          "column": 264
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<script>`",
      "range": [
        12209,
        12219
      ],
      "loc": {
        "start": {
          "line": 357,
          "column": 264
        },
        "end": {
          "line": 357,
          "column": 274
        }
      }
    },
    {
      "type": "JSXText",
      "value": " tag in your Astro component template and send JavaScript to the browser that executes in the global scope.\n\nBy default, ",
      "range": [
        12219,
        12340
      ],
      "loc": {
        "start": {
          "line": 357,
          "column": 274
        },
        "end": {
          "line": 359,
          "column": 12
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<script>`",
      "range": [
        12340,
        12350
      ],
      "loc": {
        "start": {
          "line": 359,
          "column": 12
        },
        "end": {
          "line": 359,
          "column": 22
        }
      }
    },
    {
      "type": "JSXText",
      "value": " tags are processed by Astro.\n\n- Any imports will be bundled, allowing you to import local files or Node modules.\n- The processed script will be injected into your page’s ",
      "range": [
        12350,
        12521
      ],
      "loc": {
        "start": {
          "line": 359,
          "column": 22
        },
        "end": {
          "line": 362,
          "column": 57
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<head>`",
      "range": [
        12521,
        12529
      ],
      "loc": {
        "start": {
          "line": 362,
          "column": 57
        },
        "end": {
          "line": 362,
          "column": 65
        }
      }
    },
    {
      "type": "JSXText",
      "value": " with [",
      "range": [
        12529,
        12536
      ],
      "loc": {
        "start": {
          "line": 362,
          "column": 65
        },
        "end": {
          "line": 362,
          "column": 72
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`type=\"module\"`",
      "range": [
        12536,
        12551
      ],
      "loc": {
        "start": {
          "line": 362,
          "column": 72
        },
        "end": {
          "line": 362,
          "column": 87
        }
      }
    },
    {
      "type": "JSXText",
      "value": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n- If your component is used several times on a page, the script tag will only be included once.\n\n:::caution\nYou can’t currently write TypeScript in client-side scripts, but you _can_ import a Typescript file if you prefer writing with that syntax.\n:::\n\n",
      "range": [
        12551,
        12878
      ],
      "loc": {
        "start": {
          "line": 362,
          "column": 87
        },
        "end": {
          "line": 369,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n<script>\n  // Processed! Bundled! ESM imports work, even to npm packages.\n</script>\n```",
      "range": [
        12878,
        12974
      ],
      "loc": {
        "start": {
          "line": 369,
          "column": 0
        },
        "end": {
          "line": 373,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\nTo avoid bundling the script, you can use the ",
      "range": [
        12974,
        13022
      ],
      "loc": {
        "start": {
          "line": 373,
          "column": 3
        },
        "end": {
          "line": 375,
          "column": 46
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`is:inline`",
      "range": [
        13022,
        13033
      ],
      "loc": {
        "start": {
          "line": 375,
          "column": 46
        },
        "end": {
          "line": 375,
          "column": 57
        }
      }
    },
    {
      "type": "JSXText",
      "value": " attribute.\n\n",
      "range": [
        13033,
        13046
      ],
      "loc": {
        "start": {
          "line": 375,
          "column": 57
        },
        "end": {
          "line": 377,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n<script is:inline>\n  // Will be rendered into the HTML exactly as written!\n  // ESM imports will not be resolved relative to the file.\n</script>\n```",
      "range": [
        13046,
        13203
      ],
      "loc": {
        "start": {
          "line": 377,
          "column": 0
        },
        "end": {
          "line": 382,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\nMultiple ",
      "range": [
        13203,
        13214
      ],
      "loc": {
        "start": {
          "line": 382,
          "column": 3
        },
        "end": {
          "line": 384,
          "column": 9
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<script>`",
      "range": [
        13214,
        13224
      ],
      "loc": {
        "start": {
          "line": 384,
          "column": 9
        },
        "end": {
          "line": 384,
          "column": 19
        }
      }
    },
    {
      "type": "JSXText",
      "value": " tags can be used in the same ",
      "range": [
        13224,
        13254
      ],
      "loc": {
        "start": {
          "line": 384,
          "column": 19
        },
        "end": {
          "line": 384,
          "column": 49
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`.astro`",
      "range": [
        13254,
        13262
      ],
      "loc": {
        "start": {
          "line": 384,
          "column": 49
        },
        "end": {
          "line": 384,
          "column": 57
        }
      }
    },
    {
      "type": "JSXText",
      "value": " file using any combination of the methods above.\n\n:::note\nAdding ",
      "range": [
        13262,
        13328
      ],
      "loc": {
        "start": {
          "line": 384,
          "column": 57
        },
        "end": {
          "line": 387,
          "column": 7
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`type=\"module\"`",
      "range": [
        13328,
        13343
      ],
      "loc": {
        "start": {
          "line": 387,
          "column": 7
        },
        "end": {
          "line": 387,
          "column": 22
        }
      }
    },
    {
      "type": "JSXText",
      "value": " or any other attribute to a ",
      "range": [
        13343,
        13372
      ],
      "loc": {
        "start": {
          "line": 387,
          "column": 22
        },
        "end": {
          "line": 387,
          "column": 51
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<script>`",
      "range": [
        13372,
        13382
      ],
      "loc": {
        "start": {
          "line": 387,
          "column": 51
        },
        "end": {
          "line": 387,
          "column": 61
        }
      }
    },
    {
      "type": "JSXText",
      "value": " tag will disable Astro's default bundling behavior, treating the tag as if it had an ",
      "range": [
        13382,
        13468
      ],
      "loc": {
        "start": {
          "line": 387,
          "column": 61
        },
        "end": {
          "line": 387,
          "column": 147
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`is:inline`",
      "range": [
        13468,
        13479
      ],
      "loc": {
        "start": {
          "line": 387,
          "column": 147
        },
        "end": {
          "line": 387,
          "column": 158
        }
      }
    },
    {
      "type": "JSXText",
      "value": " directive.\n:::\n\n📚 See our [directives reference](/en/reference/directives-reference/#script--style-directives) page for more information about the directives available on ",
      "range": [
        13479,
        13652
      ],
      "loc": {
        "start": {
          "line": 387,
          "column": 158
        },
        "end": {
          "line": 390,
          "column": 156
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`<script>`",
      "range": [
        13652,
        13662
      ],
      "loc": {
        "start": {
          "line": 390,
          "column": 156
        },
        "end": {
          "line": 390,
          "column": 166
        }
      }
    },
    {
      "type": "JSXText",
      "value": " tags.\n\n#### Loading External Scripts\n\n**When to use this:** If your JavaScript file lives inside of ",
      "range": [
        13662,
        13763
      ],
      "loc": {
        "start": {
          "line": 390,
          "column": 166
        },
        "end": {
          "line": 394,
          "column": 62
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`public/`",
      "range": [
        13763,
        13772
      ],
      "loc": {
        "start": {
          "line": 394,
          "column": 62
        },
        "end": {
          "line": 394,
          "column": 71
        }
      }
    },
    {
      "type": "JSXText",
      "value": ".\n\nNote that this approach skips the JavaScript processing, bundling and optimizations that are provided by Astro when you use the ",
      "range": [
        13772,
        13903
      ],
      "loc": {
        "start": {
          "line": 394,
          "column": 71
        },
        "end": {
          "line": 396,
          "column": 128
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`import`",
      "range": [
        13903,
        13911
      ],
      "loc": {
        "start": {
          "line": 396,
          "column": 128
        },
        "end": {
          "line": 396,
          "column": 136
        }
      }
    },
    {
      "type": "JSXText",
      "value": " method described below.\n\n",
      "range": [
        13911,
        13937
      ],
      "loc": {
        "start": {
          "line": 396,
          "column": 136
        },
        "end": {
          "line": 398,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n// absolute URL path\n<script is:inline src=\"/some-external-script.js\"></script>\n```",
      "range": [
        13937,
        14029
      ],
      "loc": {
        "start": {
          "line": 398,
          "column": 0
        },
        "end": {
          "line": 401,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n#### Using Hoisted Scripts\n\n**When to use this:** If your external script lives inside of ",
      "range": [
        14029,
        14120
      ],
      "loc": {
        "start": {
          "line": 401,
          "column": 3
        },
        "end": {
          "line": 404,
          "column": 62
        }
      }
    },
    {
      "type": "JSXText",
      "value": "`src/`",
      "range": [
        14120,
        14126
      ],
      "loc": {
        "start": {
          "line": 404,
          "column": 62
        },
        "end": {
          "line": 404,
          "column": 68
        }
      }
    },
    {
      "type": "JSXText",
      "value": " _and_ it supports the ESM module type.\n\nAstro detects these JavaScript client-side imports and then builds, optimizes, and adds the JS to the page automatically.\n\n",
      "range": [
        14126,
        14290
      ],
      "loc": {
        "start": {
          "line": 404,
          "column": 68
        },
        "end": {
          "line": 408,
          "column": 0
        }
      }
    },
    {
      "type": "JSXText",
      "value": "```astro\n// ESM import\n<script>\n  import './some-external-script.js';\n</script>\n```",
      "range": [
        14290,
        14373
      ],
      "loc": {
        "start": {
          "line": 408,
          "column": 0
        },
        "end": {
          "line": 413,
          "column": 3
        }
      }
    },
    {
      "type": "JSXText",
      "value": "\n\n\n## Next Steps\n\n📚 Read about [Astro's built-in components](/en/reference/api-reference/#built-in-components).\n\n📚 Learn about using [JavaScript framework components](/en/core-concepts/framework-components/) in your Astro project.\n",
      "range": [
        14373,
        14606
      ],
      "loc": {
        "start": {
          "line": 413,
          "column": 3
        },
        "end": {
          "line": 421,
          "column": 0
        }
      }
    }
  ],
  "range": [
    0,
    14606
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 421,
      "column": 0
    }
  }
}